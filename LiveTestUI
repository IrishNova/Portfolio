"""
Interface to show how different strategies are progressing
"""
from tkinter import *
from tkinter import ttk
from tkinter.ttk import Treeview

import pandas as pd
from ttkthemes import ThemedStyle
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib import pyplot as plt
import seaborn as sns
from tkmacosx import Button
from SimulationDatabaseController import WorkingDB
import yfinance as yf
from datetime import datetime as dt
import datetime
import requests


def iex_price(tkr):
    token = "pk_6c88c066429a49f6bcb3d6a2e359fc10"
    ppp = f'https://cloud.iexapis.com/stable/stock/{tkr}/price/?token={token}'
    return requests.get(ppp).json()


def stock_fetch(caller, period=365):
    """
    Gets historical data for a specified period of euqities's ticker
    :param caller: Ticker
    :param period: number of days
    :return: dataframe with OHLCV data
    """
    now = dt.now()
    past = now - datetime.timedelta(days=period)
    return yf.download(['{}'.format(caller)], past, now)


def redGreenShow(b2):
    if b2 >= 0:
        return "lime"
    else:
        return "red"


def data_prep(data, cb):
    """
    Will almost certianly have to be amended in the future
    :param data:
    :return:
    """
    df = data.reset_index().copy()
    spy = stock_fetch("SPY", len(data) + 10)
    try:
        d = df.iloc[1].Date
        # cut = spy[d:]
    except IndexError:
        d = df.iloc[-1].Date
    cut = spy[d:]
    try:    # After Hours
        modifier = 10000 / cut.Close.iloc[0]
        cut["Value"] = cut.Close * modifier
        new = df[1:]
        new["SPX"] = list(cut.Value)
        if str(new.Balance.iloc[-1]) == 'nan':  # this will trigger if the portfolio is new
            new['Balance'] = [10000, cb]
            new['Date'] = spy.index[-2:]
        new = new.set_index(new.Date)
    except ValueError:  # Market Hours
        modifier = 10000 / cut.Close.iloc[0]
        cut["Value"] = cut.Close * modifier
        new = df[1:]
        temp = {"Date": dt.now(), "Balance": cb}
        new = new.append(temp, ignore_index=True)
        new["SPX"] = list(cut.Value)
        new = new.set_index(new.Date)
    return new


def graphic(data, name, cb):
    face_col = (0.0, 0.0, 0.0)
    background_col = 'xkcd:black'
    fig = plt.figure(figsize=(6, 3), dpi=100)
    fig.patch.set_facecolor(background_col)
    ax = fig.add_subplot(111)
    df = data_prep(data, cb)
    sns.lineplot(data=df, x=df.index, y=df.Balance, color="white", linewidth=1)
    sns.lineplot(data=df, x=df.index, y=df.SPX, color="lime", linewidth=1)
    plt.legend(['Portfolio', 'SPX'])

    ax.set_facecolor(face_col)

    ax.title.set_color('white')
    ax.grid(alpha=0.225, linestyle='dotted')

    ax.tick_params(axis='x', colors='white')
    plt.xticks(fontsize=4)

    ax.tick_params(axis='y', colors='white')
    ax.yaxis.tick_right()
    plt.yticks(fontsize=6)
    plt.title(name)

    return fig


def graph_placer(window, data, na, cb, x=280, y=50):
    fig = graphic(data, na, cb)
    new_can = Frame(window, bg='grey1')
    new_can.place(x=x, y=y)

    canvas = FigureCanvasTkAgg(fig, master=new_can)
    canvas.draw()

    canvas.get_tk_widget().pack(side=TOP)

    toolbar = NavigationToolbar2Tk(canvas, new_can)
    toolbar.update()
    toolbar.config(background='black')
    Canvas(new_can, bg='grey1')
    canvas.get_tk_widget().pack(side=TOP)

    return new_can


def b_dat_packager(data):
    temp = {"SellDates": data['SellDates'][1:], "Returns": data['TradeReturn']}
    tdf = pd.DataFrame(temp)
    tdf['RGS'] = [redGreenShow(x) for x in tdf.Returns]
    return tdf


def top_graphic(data, name, b_dates):
    face_col = (0.0, 0.0, 0.0)
    background_col = 'xkcd:black'
    fig = plt.figure(figsize=(7.5, 3), dpi=100)
    fig.patch.set_facecolor(background_col)
    ax = fig.add_subplot(111)

    sns.lineplot(data=data, x=data.index, y=data.Close, color="white", linewidth=1)
    fly = b_dat_packager(b_dates)
    for f in range(len(fly)):
        raw = str((fly.iloc[f].SellDates))
        year = raw[:4]
        month = raw[5:7]
        day = raw[8:10]
        plt.axvline(datetime.datetime(int(year), int(month), int(day)), color=fly.iloc[f].RGS, alpha=0.1)

    ax.set_facecolor(face_col)

    ax.tick_params(axis='x', colors='white')
    plt.xticks(fontsize=5)

    ax.tick_params(axis='y', colors='white')
    ax.yaxis.tick_right()
    plt.yticks(fontsize=6)
    plt.title(name)

    return fig


def top_graph_placer(window, data, na, etra, x=280, y=50):
    fig = top_graphic(data, na, etra)
    new_can = Frame(window, bg='grey1')
    new_can.place(x=x, y=y)

    canvas = FigureCanvasTkAgg(fig, master=new_can)
    canvas.draw()

    canvas.get_tk_widget().pack(side=TOP)

    toolbar = NavigationToolbar2Tk(canvas, new_can)
    toolbar.update()
    toolbar.config(background='black')
    Canvas(new_can, bg='grey1')
    canvas.get_tk_widget().pack(side=TOP)

    return new_can


class IndividualStratWindow:

    def __init__(self, base, tick, all):
        self.tick = tick
        self.all = all
        self.tl = Toplevel(base)
        self.tl.geometry("800x800")
        self.tl.title("{} Details".format(tick))
        self.rawimport = stock_fetch(tick, 3500)
        self.startup()

    def tl_graph(self):
        top_graph_placer(self.tl, self.rawimport, self.tick, self.all, x=10, y=10)

    def startup(self):
        self.tl_graph()


class DataWindow:

    def __init__(self, frame, data):
        self.dbname = data
        self.frame = frame
        self.data = WorkingDB(data)
        self.strats = self.data.strategy_retriever("all")
        self.holdings = self.data.holdings()
        self.fireup()
        self.cb = None

    def closer(self):
        cbb = Button(self.frame,
                     command=self.frame.destroy,
                     height=20,
                     width=100,
                     font='TkFixedFont',
                     bg='red', fg='white',
                     text="Close")
        cbb.place(x=1050, y=0)

    def current(self):
        temp = self.holdings.copy()
        cp = [iex_price(x) for x in temp.Ticker]
        temp["now"] = cp
        temp['tots'] = temp.now * temp.NumberofShares
        return sum(temp.tots)

    def port_details(self):
        base = Canvas(self.frame, height=400, width=200, bg='black')
        base.place(x=975, y=25)

        '''Title'''
        mainlab = Label(base, text='Portfolio Details', font=('TkFixedFont', 15), bg='black', fg='white')
        mainlab.place(x=75, y=5)

        '''Balance'''
        cash = self.data.avb_retrieve()['Balance']
        assets = self.current()
        b = assets + cash
        self.cb = b
        bal = Label(base, text='Balance | ${:,.02f}'.format(b), fg='white', bg='black')
        bal.place(x=10, y=30)
        b2 = ((b - 10000)/10000) * 100
        plp = Label(base, text="{:.02f}%".format(b2), fg=redGreenShow(b2), bg='black')
        plp.place(x=140, y=30)

        '''DoD Returns, Portfolio'''
        tsd = self.data.balance_time_series()
        dod = ((b - tsd.iloc[-1][0]) / tsd.iloc[-1][0])*100
        dodl = Label(base, text="DoD Return | ", fg='white', bg='black')
        dodl.place(x=10, y=55)
        dop = Label(base, text="{:.02f}%".format(dod), fg=redGreenShow(dod), bg='black')
        dop.place(x=100, y=55)

        '''DoD Returns, Benchmark'''
        sn = iex_price("SPY")
        spy = ((sn - stock_fetch("SPY", 4).iloc[-2].Close)/sn) * 100
        sl = Label(base, text="SPY DoD | ", fg='white', bg='black')
        sl.place(x=10, y=80)
        slp = Label(base, text="{:.02f}%".format(spy), fg=redGreenShow(spy), bg="black")
        slp.place(x=100, y=80)

    def holding_tree_setup(self, the_tree):
        the_tree["columns"] = (
            "Ticker", "Shares", "Price", "Total", "% of AUM")
        the_tree.column("#0", width=0, stretch=NO)
        the_tree.column("Ticker", anchor=CENTER, width=50)
        the_tree.column("Shares", anchor=CENTER, width=50)
        the_tree.column("Price", anchor=CENTER, width=60)
        the_tree.column("Total", anchor=CENTER, width=60)
        the_tree.column("% of AUM", anchor=CENTER, width=50)

        the_tree.heading("#0", text="", anchor=CENTER)
        the_tree.heading("Ticker", text="Ticker", anchor=CENTER)
        the_tree.heading("Shares", text="Shares", anchor=CENTER)
        the_tree.heading("Price", text="Price", anchor=CENTER)
        the_tree.heading("Total", text="Total", anchor=CENTER)
        the_tree.heading("% of AUM", text="% of AMU", anchor=CENTER)

        return the_tree

    def place_one(self, x, data):
        for i in range(len(data)):
            x.insert(parent='', index='end', iid=i, text='',
                     values=('{}'.format(data.iloc[i].Ticker),
                             '{}'.format(int(data.iloc[i]['NumberofShares'])),
                             '{}'.format(data.iloc[i]['BuyPrice']),
                             '{:.2f}'.format(data.iloc[i]['Total']),
                             '{:,}'.format(data.iloc[i]['% of AUM'])))

    def OpenPositionTree(self):
        df = self.holdings
        t1f = Frame(self.frame, bg='grey1')
        t1f.place(x=10, y=25, height=250, width=275)

        style = ThemedStyle(t1f)
        style.theme_use("black")
        style.configure('Treeview', background='grey9', foreground='white', fieldbackground='grey9')
        style.configure("Treeview.Heading", background="grey20", foreground="orange3", fieldbackground='grey20')
        style.map('Treeview', background=[('selected', 'RoyalBlue4')])

        global x

        def selected():
            print('yep')

        scroll_barY = Scrollbar(t1f)
        scroll_barY.pack(side=RIGHT, fill=Y)
        tree = Treeview(t1f, yscrollcommand=scroll_barY.set)
        tree.pack()
        tree.bind('<Double-1>', selected)
        scroll_barY.config(command=tree.yview)

        first = self.holding_tree_setup(tree)
        self.place_one(first, df)

    def graphic(self):
        df = self.data.balance_time_series()
        graph_placer(self.frame, df, self.dbname, self.cb)

    def place_two(self, x, data):
        for i in range(len(data)):
            x.insert(parent='', index='end', iid=i, text='',
                     values=('{}'.format(data.iloc[i].Ticker),
                             '{}'.format((data.iloc[i]['Odds'])),
                             '{}'.format(data.iloc[i]['Description']),
                             ))

    def strat_tree_setup(self, the_tree):
        the_tree["columns"] = (
            "Ticker", "Odds", "Model Type")
        the_tree.column("#0", width=0, stretch=NO)
        the_tree.column("Ticker", anchor=CENTER, width=75)
        the_tree.column("Odds", anchor=CENTER, width=75)
        the_tree.column("Model Type", anchor=CENTER, width=350)

        the_tree.heading("#0", text="", anchor=CENTER)
        the_tree.heading("Ticker", text="Ticker", anchor=CENTER)
        the_tree.heading("Odds", text="Odds", anchor=CENTER)
        the_tree.heading("Model Type", text="Model Type", anchor=CENTER)

        return the_tree

    def strat_tree(self):
        df = self.strats
        t1f = Frame(self.frame, bg='white')
        t1f.place(x=350, y=450, height=200, width=500)

        style = ThemedStyle(t1f)
        style.theme_use("black")
        style.configure('Treeview', background='grey9', foreground='white', fieldbackground='grey9')
        style.configure("Treeview.Heading", background="grey20", foreground="orange3", fieldbackground='grey20')
        style.map('Treeview', background=[('selected', 'RoyalBlue4')])

        global x

        def selected(*args):
            select = int(tree.selection()[0])
            t = (df.Ticker.iloc[select])
            IndividualStratWindow(self.frame, t, df.iloc[select])

        scroll_barY = Scrollbar(t1f)
        scroll_barY.pack(side=RIGHT, fill=Y)
        tree = Treeview(t1f, yscrollcommand=scroll_barY.set)
        tree.pack()
        tree.bind('<Double-1>', selected)
        scroll_barY.config(command=tree.yview)

        first = self.strat_tree_setup(tree)
        self.place_two(first, df)

    def fireup(self):
        self.port_details()
        self.OpenPositionTree()
        self.strat_tree()
        self.graphic()
        self.closer()


class StratTab:

    def __init__(self, tl):
        self.back = tl
        self.my_notebook = ttk.Notebook(tl)
        self.my_notebook.place(x=0, y=50)

    def new_tab(self, data):
        frame1 = Frame(self.my_notebook, width=1200, height=700, bg='black')  # frame for data
        DataWindow(frame1, data)
        frame1.pack(fill='both', expand=1)  # Places frame
        self.my_notebook.add(frame1, text='{}'.format(data))  # creates tab button


class BacktestUI:

    def __init__(self):
        self.root = Tk()
        self.root.geometry('1200x800')
        self.root.title("Backtesting Interface")
        self.OpenTab = ['Select Portfolio']
        self.deal = StratTab(self.root)

    def tiptop(self):
        base = Frame(self.root, height=50, width=1200, bg='black')
        base.place(x=0, y=0)

        def click():
            x = clicked.get()
            if x in self.OpenTab:
                pass
            else:
                self.deal.new_tab(x)
                self.OpenTab.append(x)

        db_list = ['Select Portfolio', 'StratTestPortfolio', 'AllStar', 'ShotGun', 'DataBase4']

        clicked = StringVar()
        clicked.set(db_list[0])
        drop = OptionMenu(base, clicked, *db_list)
        drop.place(x=10, y=15)

        gee = Button(base, text="Add", command=click)
        gee.place(x=150, y=14, width=50, height=25)

    def startup(self):
        self.tiptop()
        self.root.mainloop()


if __name__ == "__main__":
    BacktestUI().startup()
